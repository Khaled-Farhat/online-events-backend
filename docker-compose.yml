version: "3.8"

services:
  reverse-proxy:
    image: ${IMAGES_PREFIX-online-events}/reverse-proxy:${IMAGES_TAG-latest}
    build:
      context: ./reverse-proxy
    ports:
      - 8080:80
    volumes:
      - storage_data:/var/www/app/storage
    depends_on:
      - django-wsgi
      - django-asgi
      - streaming
    environment:
      - DJANGO_ASGI=django-asgi:8000
      - DJANGO_WSGI=django-wsgi:8000
      - RTC_API=streaming:1985
      - HLS_SERVER=streaming:8080
    restart: unless-stopped
    networks:
      - frontend

  streaming:
    image: ${IMAGES_PREFIX-online-events}/streaming:${IMAGES_TAG-latest}
    build:
      context: ./streaming
    ports:
      - 8000:8000/udp # WebRTC Media server.
    env_file:
      - .env/.streaming.env
    networks:
      - frontend

  django-asgi: &app
    image: ${IMAGES_PREFIX-online-events}/app:${IMAGES_TAG-latest}
    build:
      context: ./app
      target: prod
    entrypoint: ./entrypoints/entrypoint-asgi.sh
    volumes:
      - storage_data:/usr/src/app/storage
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env/.app.env
    environment:
      - DJANGO_DEBUG=False
    restart: unless-stopped
    networks:
      - frontend
      - backend

  django-wsgi:
    <<: *app
    entrypoint: ./entrypoints/entrypoint-wsgi.sh

  celery-worker:
    <<: *app
    entrypoint: ./entrypoints/entrypoint-celery-worker.sh

  celery-beat:
    <<: *app
    entrypoint: ./entrypoints/entrypoint-celery-beat.sh

  redis:
    image: redis:7.0.12
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 3s
      timeout: 3s
      retries: 5
    networks:
      - backend

  db:
    image: postgres:15.2
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env/.db.env
    healthcheck:
      test: ["CMD-SHELL", 'pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"']
      interval: 3s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - backend

volumes:
  db_data:
  storage_data:

networks:
  frontend:
  backend:
